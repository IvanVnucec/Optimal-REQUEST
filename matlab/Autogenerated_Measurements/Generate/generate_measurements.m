%% Kod za generiranje mjerenja i testiranje algoritama

% Svrha ovog koda je generirati mjerenja akcelerometra, magnetometra i
% ziroskopa umjetnim putem kako bismo imali ground thruth za ispitivanje
% tocnosti algoritama za odredjivanje orijentacije satelita u razvoju

clear all;
close all;
clc;



T = 72; % Ukupno vrijeme uzimanja uzoraka u sekundama
fs = 10; % Frekvencija uzimanja uzoraka u Hz
n = [0, 0, 1]'; % Vektor osi rotacije
omega = 20; % Apsolutna vrijednost kutne brzine rotacije oko osi rotacije u inercijalnom sustavu u deg/s



t = linspace(0,T,T*fs + 1); 
n_norm = n/norm(n);

% Vektori u inercijalnom sustavu
a_i = [0 0 -9.81]';        % u NED sustavu
m_i = [22.2 1.7 42.7]'; % u NED sustavu
w_i = deg2rad(omega)*n_norm;  % Vektor kutne brzine u inercijalnom u rad/s

alpha = deg2rad(omega)*t; % Kada je omega konstantna, akumulacija kuta je linearna fukncija vremena

% Otvaranje file-a
filename = ['Autogenerated_measurements_z.csv'];
fid = fopen(filename, 'a+');

fprintf(fid, ['T = ' num2str(T) ' sec\t\t\t-> Ukupno vrijeme uzimanja uzoraka\n']);
fprintf(fid, ['fs = ' num2str(fs) ' Hz\t\t\t-> Frekvencija uzimanja uzoraka\n']);
fprintf(fid, ['omega = ' num2str(omega) ' deg/s\t-> Kutna brzina\n']);
fprintf(fid, ['n = [' num2str(n(1)) ', ' num2str(n(2)) ', ' num2str(n(3)) ']\t\t-> Nenormalizirani vektor osi rotacije\n\n']);

fprintf(fid, 'Legenda:\n');
fprintf(fid, '\ta_i\t-> Mjerenje akcelerometra u inercijalnom sustavu (x, y, i z komponenta)\n');
fprintf(fid, '\tm_i\t-> Mjerenje magnetometra u inercijalnom sustavu (x, y, i z komponenta)\n');
fprintf(fid, '\tw_i\t-> Mjerenje ziroskopa u inercijalnom sustavu (x, y, i z komponenta)\n');
fprintf(fid, '\ta_b\t-> Mjerenje akcelerometra u sustavu tijela (x, y, i z komponenta)\n');
fprintf(fid, '\tm_b\t-> Mjerenje magnetometra u sustavu tijela (x, y, i z komponenta)\n');
fprintf(fid, '\tw_b\t-> Mjerenje ziroskopa u sustavu tijela (x, y, i z komponenta)\n');
fprintf(fid, '\tqib\t-> Kvaternion rotacije iz inercijalnog u sustav tijela (cetiri komponente)\n\n');

fprintf(fid, 'Format podataka:\n');
fprintf(fid, '---------------------------------------------------------------');
fprintf(fid, '---------------------------------------------------------------');
fprintf(fid, '------------------------\n');

fprintf(fid, 'a_i_x, a_i_y, a_i_z, m_i_x, m_i_y, m_i_z, w_i_x, w_i_y, w_i_z, ');
fprintf(fid, 'a_b_x, a_b_y, a_b_z, m_b_x, m_b_y, m_b_z, w_b_x, w_b_y, w_b_z, ');
fprintf(fid, 'qib1, qib2, qib3, qib4\n');

fprintf(fid, '---------------------------------------------------------------');
fprintf(fid, '---------------------------------------------------------------');
fprintf(fid, '------------------------\n\n');


for i = 1:length(alpha)
    qib = [cos(alpha(i)/2); sin(alpha(i)/2)*n_norm];
    Rib = qib2Rib(qib);
    a_b = Rib*a_i;
    m_b = Rib*m_i;
    w_b = Rib*w_i;

    fprintf(fid, '%.4f,%.4f,%.4f,', a_i);  
    fprintf(fid, '%.4f,%.4f,%.4f,', m_i); 
    fprintf(fid, '%.4f,%.4f,%.4f,', w_i);
    fprintf(fid, '%.4f,%.4f,%.4f,', a_b);  
    fprintf(fid, '%.4f,%.4f,%.4f,', m_b); 
    fprintf(fid, '%.4f,%.4f,%.4f,', w_b);
    fprintf(fid, '%.4f,%.4f,%.4f,%.4f\n', qib);
end

fclose(fid);